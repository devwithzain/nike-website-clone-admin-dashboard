datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id            String    @id @default(uuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Store         Store[]
}

model PasswordResetToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Store {
  id          String        @id @default(uuid()) @map("_id")
  name        String
  userId      String
  user        Admin         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Billboard   Billboard[]
  Category    Category[]
  Product     Product[]
  Order       Order[]
  Size        Size[]
  Color       Color[]
  Subcategory Subcategory[]
}

model Billboard {
  id         String     @id @default(uuid()) @map("_id")
  label      String
  imageUrl   String
  storeId    String
  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String        @id @default(uuid()) @map("_id")
  storeId     String
  store       Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  billboardId String
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  billboard   Billboard     @relation(fields: [billboardId], references: [id])
  Product     Product[]
  Subcategory Subcategory[]
}

model Subcategory {
  id         String    @id @default(uuid()) @map("_id")
  name       String
  Product    Product[]
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  storeId    String
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Product {
  id            String         @id @default(uuid()) @map("_id")
  storeId       String
  store         Store          @relation(fields: [storeId], references: [id])
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id])
  name          String
  price         Float
  isFeatured    Boolean        @default(false)
  isArchived    Boolean        @default(false)
  subcategoryId String
  subcategory   Subcategory    @relation(fields: [subcategoryId], references: [id])
  images        Image[]
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ProductColor  ProductColor[]
  ProductSize   ProductSize[]
}

model Order {
  id         String      @id @default(uuid()) @map("_id")
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid()) @map("_id")
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Size {
  id          String        @id @default(uuid()) @map("_id")
  storeId     String
  store       Store         @relation(fields: [storeId], references: [id])
  name        String
  value       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ProductSize ProductSize[]
}

model Color {
  id           String         @id @default(uuid()) @map("_id")
  storeId      String
  store        Store          @relation(fields: [storeId], references: [id])
  name         String
  value        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProductColor ProductColor[]
}

model ProductColor {
  id        String   @id @default(uuid()) @map("_id")
  productId String
  colorId   String
  name      String
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSize {
  id        String   @id @default(uuid()) @map("_id")
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId    String
  name      String
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid()) @map("_id")
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
